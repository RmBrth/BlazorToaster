@if (toasts.Any())
{
    <div class="custom-toast-container">
        <CascadingValue Value="this">
            @foreach (var toast in toasts)
            {
                // 1st attempt
                @*RenderFragment renderFragment = (builder) =>
                {
                    builder.OpenComponent(0, toast.GetType());
                    builder.AddAttribute(1, "Id", toast.Id);
                    builder.AddAttribute(2, "Message", toast.Message);
                    builder.AddAttribute(3, "Level", toast.Level);
                    builder.SetKey(toast);
                    builder.CloseComponent();
                };
                @renderFragment*@

                // This way is sightly better. I guess a new fragment is not rendered at each StateHasChanged because of the @key directive.
                <Toast @key="toast" Id="@toast.Id" Message="@toast.Message" Level="@toast.Level" />

                // What the point of loading a List<Component> if you have to create a new component and bind properties?
            }
        </CascadingValue>
    </div>
}
